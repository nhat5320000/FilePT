import cv2
import numpy as np
from ultralytics import YOLO
import random

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn m√¥ h√¨nh YOLO
model_path = "training/five-objects/yolov11n/yolov11_last.engine"  # C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n file m√¥ h√¨nh m·ªõi
object_detect = YOLO(model_path, task='detect')

# L·∫•y t√™n c√°c l·ªõp t·ª´ m√¥ h√¨nh (n·∫øu c√≥), n·∫øu kh√¥ng th√¨ ƒë·ªãnh nghƒ©a th·ªß c√¥ng
if hasattr(object_detect.model, 'names'):
    class_names = object_detect.model.names
else:
    class_names = {0: "Object1", 1: "Object2", 2: "Object3", 3: "Object4", 4: "Object5"}

# T·∫°o dictionary √°nh x·∫° l·ªõp v·ªõi m√†u s·∫Øc c·ªë ƒë·ªãnh
color_map = {
    0: (0, 255, 0),   # Xanh l√°
    1: (255, 0, 0),   # Xanh d∆∞∆°ng
    2: (0, 0, 255),   # ƒê·ªè
    3: (255, 255, 0), # Ng√† v√†ng
    4: (0, 255, 255)  # L·ª•c lam
}

# Bi·∫øn ƒëi·ªÅu khi·ªÉn
cap = None
detecting = False
show_window = False

# H√†m m·ªü camera
def open_camera():
    global cap
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("‚ùå Kh√¥ng th·ªÉ m·ªü camera!")
        cap = None

# H√†m ƒë√≥ng camera
def close_camera():
    global cap
    if cap is not None:
        cap.release()
        cap = None

# T·∫°o c·ª≠a s·ªï ƒëi·ªÅu khi·ªÉn lu√¥n hi·ªÉn th·ªã
cv2.namedWindow('Control Panel', cv2.WINDOW_NORMAL)
cv2.resizeWindow('Control Panel', 300, 100)
cv2.imshow('Control Panel', np.zeros((100, 300, 3), dtype=np.uint8))

while True:
    key = cv2.waitKey(1) & 0xFF

    if key == ord('q'):
        print("üõë Tho√°t ch∆∞∆°ng tr√¨nh...")
        break
    elif key == ord('e'):
        if not detecting:
            open_camera()
            if cap is not None:
                detecting = True
                print("üîß B·∫Øt ƒë·∫ßu ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng!")
    elif key == ord('r'):
        if detecting:
            detecting = False
            close_camera()
            if show_window:
                cv2.destroyWindow("Object Detection")
            print("üõë D·ª´ng ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng v√† t·∫Øt camera.")
    elif key == ord('w'):
        if detecting:
            show_window = not show_window
            if not show_window:
                cv2.destroyWindow("Object Detection")
            print(f"üîß Tr·∫°ng th√°i hi·ªÉn th·ªã: {'B·∫¨T' if show_window else 'T·∫ÆT'}")

    if detecting and cap is not None:
        success, frame = cap.read()
        if not success:
            print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc frame!")
            break

        # Resize frame v·ªÅ k√≠ch th∆∞·ªõc 640x640 (ƒë·ªÉ ph√π h·ª£p v·ªõi m√¥ h√¨nh)
        frame_resized = cv2.resize(frame, (640, 640))
        results = object_detect(frame_resized, conf=0.11, imgsz=640)
        detections = results[0].boxes

        # V·∫Ω bounding box, label v√† gi√° tr·ªã confidence
        for box, cls, conf in zip(detections.xyxy.int().tolist(), detections.cls.tolist(), detections.conf.tolist()):
            x1, y1, x2, y2 = box
            color = color_map.get(int(cls), (random.randint(0,255), random.randint(0,255), random.randint(0,255)))
            label = f"{class_names[int(cls)]}: {conf:.2f}"
            cv2.rectangle(frame_resized, (x1, y1), (x2, y2), color, 2)
            cv2.putText(frame_resized, label, (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

        if show_window:
            cv2.imshow("Object Detection", frame_resized)
            # T·ª± ƒë·ªông t·∫Øt khi c·ª≠a s·ªï b·ªã ƒë√≥ng (nh·∫•n n√∫t X)
            if cv2.getWindowProperty("Object Detection", cv2.WND_PROP_VISIBLE) < 1:
                show_window = False
    else:
        cv2.waitKey(100)  # Gi·∫£m t·∫£i CPU khi kh√¥ng ph√°t hi·ªán

# Gi·∫£i ph√≥ng t√†i nguy√™n
close_camera()
cv2.destroyAllWindows()
