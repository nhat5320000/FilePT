import cv2
import numpy as np
from ultralytics import YOLO
import random

# Load m√¥ h√¨nh YOLO cho 5 ƒë·ªëi t∆∞·ª£ng
model_path = "training/five-objects/yolov11n/yolov11_last.engine"  # C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n file m√¥ h√¨nh m·ªõi
object_detect = YOLO(model_path, task='detect')

# L·∫•y t√™n c√°c l·ªõp t·ª´ m√¥ h√¨nh (n·∫øu c√≥), n·∫øu kh√¥ng th√¨ ƒë·ªãnh nghƒ©a th·ªß c√¥ng
if hasattr(object_detect.model, 'names'):
    class_names = object_detect.model.names  # V√≠ d·ª•: {0: "Object1", 1: "Object2", ...}
else:
    class_names = {0: "Object1", 1: "Object2", 2: "Object3", 3: "Object4", 4: "Object5"}

# T·∫°o dictionary √°nh x·∫° l·ªõp v·ªõi m√†u s·∫Øc c·ªë ƒë·ªãnh (b·∫°n c√≥ th·ªÉ t·ª± ƒë·ªãnh nghƒ©a m√†u ho·∫∑c sinh ng·∫´u nhi√™n)
color_map = {
    0: (0, 255, 0),   # Xanh l√°
    1: (255, 0, 0),   # Xanh d∆∞∆°ng
    2: (0, 0, 255),   # ƒê·ªè
    3: (255, 255, 0), # Ng√† v√†ng
    4: (0, 255, 255)  # L·ª•c lam
}

# M·ªü camera
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("‚ùå Kh√¥ng th·ªÉ m·ªü camera!")
    exit()

# T·∫°o c·ª≠a s·ªï ƒëi·ªÅu khi·ªÉn lu√¥n hi·ªÉn th·ªã
cv2.namedWindow('Control Panel', cv2.WINDOW_NORMAL)
cv2.resizeWindow('Control Panel', 300, 100)
cv2.imshow('Control Panel', np.zeros((100, 300, 3), dtype=np.uint8))

# Bi·∫øn ƒëi·ªÅu khi·ªÉn hi·ªÉn th·ªã
show_window = False

while True:
    success, frame = cap.read()
    if not success:
        print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc frame!")
        break

    # X·ª≠ l√Ω frame (resize v·ªÅ 320x320)
    frame_resized = cv2.resize(frame, (320, 320))
    results = object_detect(frame_resized, conf=0.11, imgsz=320)
    detections = results[0].boxes

    # V·∫Ω bounding box v√† nh√£n t∆∞∆°ng ·ª©ng v·ªõi ƒë·ªëi t∆∞·ª£ng
    # Gi·∫£ s·ª≠ detections.xyxy ch·ª©a danh s√°ch box v√† detections.cls ch·ª©a id l·ªõp t∆∞∆°ng ·ª©ng
    for box, cls in zip(detections.xyxy.int().tolist(), detections.cls.tolist()):
        x1, y1, x2, y2 = box
        # Ch·ªçn m√†u d·ª±a tr√™n l·ªõp; n·∫øu kh√¥ng c√≥ trong color_map th√¨ d√πng m√†u ng·∫´u nhi√™n
        color = color_map.get(int(cls), (random.randint(0,255), random.randint(0,255), random.randint(0,255)))
        label = class_names[int(cls)]
        cv2.rectangle(frame_resized, (x1, y1), (x2, y2), color, 2)
        cv2.putText(frame_resized, label, (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

    # Hi·ªÉn th·ªã c·ª≠a s·ªï k·∫øt qu·∫£
    if show_window:
        cv2.imshow("Object Detection", frame_resized)
        # T·ª± ƒë·ªông t·∫Øt khi c·ª≠a s·ªï b·ªã ƒë√≥ng (nh·∫•n n√∫t X)
        if cv2.getWindowProperty("Object Detection", cv2.WND_PROP_VISIBLE) < 1:
            show_window = False
    else:
        try:
            cv2.destroyWindow("Object Detection")
        except:
            pass

    # X·ª≠ l√Ω s·ª± ki·ªán ph√≠m t·ª´ c·ª≠a s·ªï Control Panel
    key = cv2.waitKey(1) & 0xFF
    if key == ord('q') or key == ord('Q'):
        print("üõë Tho√°t ch∆∞∆°ng tr√¨nh...")
        break
    elif key == ord('w') or key == ord('W'):
        show_window = not show_window
        print(f"üîß Tr·∫°ng th√°i hi·ªÉn th·ªã: {'B·∫¨T' if show_window else 'T·∫ÆT'}")

# Gi·∫£i ph√≥ng t√†i nguy√™n
cap.release()
cv2.destroyAllWindows()
