import cv2
import numpy as np
import os
from datetime import datetime

# Th∆∞ m·ª•c l∆∞u ·∫£nh
save_dir = "captured_images"
if not os.path.exists(save_dir):
    os.makedirs(save_dir)

# C√°c tham s·ªë cho zoom, crop v√† xoay
zoom_factor = 1.0  # H·ªá s·ªë ph√≥ng ƒë·∫°i (1.0 l√† k√≠ch th∆∞·ªõc g·ªëc)
rotate_angle = 0  # G√≥c xoay, m·∫∑c ƒë·ªãnh l√† 0 (kh√¥ng xoay)
flip_code = 1  # 1: L·∫≠t ·∫£nh theo chi·ªÅu ngang (ho·∫∑c theo tr·ª•c d·ªçc n·∫øu flip_code = 0)

# Bi·∫øn l∆∞u tr·ªØ th√¥ng tin v·ªÅ crop
crop_start_point = None
crop_end_point = None
is_drawing = False
dragging = False  # Bi·∫øn ƒë·ªÉ ki·ªÉm tra n·∫øu ƒëang k√©o g√≥c crop

# H√†m m·ªü camera
def open_camera():
    global cap
    gst_str = (
        "nvarguscamerasrc ! "
        "video/x-raw(memory:NVMM), width=(int)1280, height=(int)720, format=(string)NV12, framerate=(fraction)30/1 ! "
        "nvvidconv flip-method=0 ! "
        "video/x-raw, width=(int)640, height=(int)640, format=(string)BGRx ! "
        "videoconvert ! "
        "video/x-raw, format=(string)BGR ! appsink"
    )
    cap = cv2.VideoCapture(gst_str, cv2.CAP_GSTREAMER)
    if not cap.isOpened():
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi CSI camera!")
        exit()

# H√†m Zoom ·∫£nh
def zoom_image(image, factor):
    height, width = image.shape[:2]
    new_width = int(width * factor)
    new_height = int(height * factor)
    resized_image = cv2.resize(image, (new_width, new_height))
    return resized_image

# H√†m Xoay ·∫£nh
def rotate_image(image, angle):
    center = (image.shape[1] // 2, image.shape[0] // 2)
    matrix = cv2.getRotationMatrix2D(center, angle, 1)
    rotated_image = cv2.warpAffine(image, matrix, (image.shape[1], image.shape[0]))
    return rotated_image

# H√†m l·∫≠t ·∫£nh
def flip_image(image, flip_code):
    return cv2.flip(image, flip_code)

# H√†m x·ª≠ l√Ω s·ª± ki·ªán chu·ªôt (cho vi·ªác crop ·∫£nh)
def mouse_callback(event, x, y, flags, param):
    global crop_start_point, crop_end_point, is_drawing, dragging

    if event == cv2.EVENT_LBUTTONDOWN:
        # B·∫Øt ƒë·∫ßu v·∫Ω ho·∫∑c k√©o g√≥c crop
        if crop_start_point and crop_end_point:
            # Ki·ªÉm tra n·∫øu ƒëi·ªÉm click g·∫ßn g√≥c crop th√¨ cho ph√©p k√©o
            if abs(x - crop_start_point[0]) < 10 and abs(y - crop_start_point[1]) < 10:
                dragging = True
                crop_start_point = (x, y)
            elif abs(x - crop_end_point[0]) < 10 and abs(y - crop_end_point[1]) < 10:
                dragging = True
                crop_end_point = (x, y)
        else:
            crop_start_point = (x, y)
            is_drawing = True

    elif event == cv2.EVENT_MOUSEMOVE:
        if is_drawing:
            crop_end_point = (x, y)
            temp_image = frame.copy()
            cv2.rectangle(temp_image, crop_start_point, crop_end_point, (0, 255, 0), 2)
            cv2.imshow("Camera Feed", temp_image)
        elif dragging:
            # Di chuy·ªÉn c√°c g√≥c khi k√©o chu·ªôt
            if crop_start_point:
                crop_end_point = (x, y)
            temp_image = frame.copy()
            cv2.rectangle(temp_image, crop_start_point, crop_end_point, (0, 255, 0), 2)
            cv2.imshow("Camera Feed", temp_image)

    elif event == cv2.EVENT_LBUTTONUP:
        # K·∫øt th√∫c v·∫Ω khi nh·∫£ chu·ªôt
        if not dragging:
            crop_end_point = (x, y)
        is_drawing = False
        dragging = False
        print(f"V√πng crop: {crop_start_point} -> {crop_end_point}")

# M·ªü camera
open_camera()  # M·ªü camera ngay khi kh·ªüi ƒë·ªông

# T·∫°o c·ª≠a s·ªï ƒëi·ªÅu khi·ªÉn
cv2.namedWindow('Camera Feed', cv2.WINDOW_NORMAL)
cv2.resizeWindow('Camera Feed', 960, 540)  # ƒê·∫£m b·∫£o c·ª≠a s·ªï c√≥ k√≠ch th∆∞·ªõc ph√π h·ª£p
cv2.setMouseCallback('Camera Feed', mouse_callback)  # G·∫Øn s·ª± ki·ªán chu·ªôt

while True:
    success, frame = cap.read()
    
    # Ki·ªÉm tra n·∫øu frame kh√¥ng h·ª£p l·ªá
    if not success or frame is None:
        print("‚ùå L·ªói ƒë·ªçc frame t·ª´ camera!")
        continue  # B·ªè qua v√≤ng l·∫∑p n√†y v√† ƒë·ªçc l·∫°i frame

    # Ki·ªÉm tra k√≠ch th∆∞·ªõc ·∫£nh h·ª£p l·ªá
    if frame.shape[0] == 0 or frame.shape[1] == 0:
        print("‚ùå K√≠ch th∆∞·ªõc ·∫£nh kh√¥ng h·ª£p l·ªá!")
        continue  # B·ªè qua v√≤ng l·∫∑p n√†y v√† ƒë·ªçc l·∫°i frame

    # Zoom ·∫£nh
    frame_zoomed = zoom_image(frame, zoom_factor)

    # Xoay ·∫£nh
    frame_rotated = rotate_image(frame_zoomed, rotate_angle)

    # L·∫≠t ·∫£nh
    frame_flipped = flip_image(frame_rotated, flip_code)

    # Hi·ªÉn th·ªã ·∫£nh sau khi x·ª≠ l√Ω
    if crop_start_point and crop_end_point:
        # V·∫Ω h√¨nh ch·ªØ nh·∫≠t crop tr√™n ·∫£nh khi c√≥ ƒëi·ªÉm b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
        cv2.rectangle(frame_flipped, crop_start_point, crop_end_point, (0, 255, 0), 2)

    # Ki·ªÉm tra k√≠ch th∆∞·ªõc h·ª£p l·ªá c·ªßa ·∫£nh tr∆∞·ªõc khi hi·ªÉn th·ªã
    if frame_flipped.shape[0] > 0 and frame_flipped.shape[1] > 0:
        cv2.imshow("Camera Feed", frame_flipped)
    else:
        print("‚ùå L·ªói: K√≠ch th∆∞·ªõc ·∫£nh kh√¥ng h·ª£p l·ªá!")

    # X·ª≠ l√Ω ph√≠m ƒëi·ªÅu khi·ªÉn
    key = cv2.waitKey(1) & 0xFF
    if key in [ord('q'), ord('Q')]:
        print("üõë Tho√°t ch∆∞∆°ng tr√¨nh...")
        break
    elif key in [ord('s'), ord('S')]:
        # L∆∞u ·∫£nh khi nh·∫•n ph√≠m 's'
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        img_filename = os.path.join(save_dir, f"image_{timestamp}.jpg")
        
        if crop_start_point and crop_end_point:
            # C·∫Øt ·∫£nh theo v√πng crop
            x1, y1 = crop_start_point
            x2, y2 = crop_end_point
            cropped_image = frame_flipped[y1:y2, x1:x2]
            cv2.imwrite(img_filename, cropped_image)
            print(f"üì∏ ƒê√£ l∆∞u ·∫£nh crop: {img_filename}")
        else:
            cv2.imwrite(img_filename, frame_flipped)
            print(f"üì∏ ƒê√£ l∆∞u ·∫£nh ƒë·∫ßy ƒë·ªß: {img_filename}")
    elif key == ord('+'):  # Ph√≥ng to ·∫£nh
        zoom_factor += 0.1
        print(f"üîç T·ªâ l·ªá zoom: {zoom_factor}")
    elif key == ord('-'):  # Thu nh·ªè ·∫£nh
        zoom_factor -= 0.1
        print(f"üîç T·ªâ l·ªá zoom: {zoom_factor}")
    elif key == ord('r'):  # Xoay ·∫£nh theo g√≥c
        rotate_angle += 90
        print(f"üîÑ G√≥c xoay: {rotate_angle}")
    elif key == ord('f'):  # L·∫≠t ·∫£nh
        flip_code = 1 if flip_code != 1 else 0
        print(f"üîÑ L·∫≠t ·∫£nh: {'Ch∆∞a l·∫≠t' if flip_code == 0 else 'L·∫≠t'}")
    elif key == ord('c'):  # X√≥a crop khi nh·∫•n ph√≠m 'C'
        crop_start_point = None
        crop_end_point = None
        print("‚ùå ƒê√£ x√≥a v√πng crop.")

# D·ªçn d·∫πp
cap.release()
cv2.destroyAllWindows()
